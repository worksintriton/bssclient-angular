{
  "_args": [
    [
      {
        "raw": "text-mask-core@^5.0.0",
        "scope": null,
        "escapedName": "text-mask-core",
        "name": "text-mask-core",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "/Users/mohammedimthiyas/Desktop/Client/node_modules/angular2-text-mask"
    ]
  ],
  "_from": "text-mask-core@>=5.0.0 <6.0.0",
  "_id": "text-mask-core@5.1.2",
  "_inCache": true,
  "_location": "/text-mask-core",
  "_nodeVersion": "6.14.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/text-mask-core_5.1.2_1532613462966_0.48032648140303613"
  },
  "_npmUser": {
    "name": "lozjackson",
    "email": "lozjacksonuk@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "text-mask-core@^5.0.0",
    "scope": null,
    "escapedName": "text-mask-core",
    "name": "text-mask-core",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/angular2-text-mask"
  ],
  "_resolved": "https://registry.npmjs.org/text-mask-core/-/text-mask-core-5.1.2.tgz",
  "_shasum": "80dd5ebe04825757e46619e691407a9f8b3c1b6f",
  "_shrinkwrap": null,
  "_spec": "text-mask-core@^5.0.0",
  "_where": "/Users/mohammedimthiyas/Desktop/Client/node_modules/angular2-text-mask",
  "author": {
    "name": "M.K. Safi",
    "email": "msafi@msafi.com"
  },
  "bugs": {
    "url": "https://github.com/text-mask/text-mask/issues"
  },
  "dependencies": {},
  "description": "Core of https://github.com/text-mask/text-mask",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "80dd5ebe04825757e46619e691407a9f8b3c1b6f",
    "tarball": "https://registry.npmjs.org/text-mask-core/-/text-mask-core-5.1.2.tgz",
    "fileCount": 19,
    "unpackedSize": 180091
  },
  "homepage": "https://github.com/text-mask/text-mask/core/#readme",
  "keywords": [
    "text mask",
    "input mask",
    "string mask",
    "input formatting",
    "text formatting",
    "string formatting"
  ],
  "license": "Unlicense",
  "main": "dist/textMaskCore.js",
  "maintainers": [
    {
      "name": "lozjackson",
      "email": "lozjacksonuk@gmail.com"
    },
    {
      "name": "msafi",
      "email": "msafi@msafi.com"
    }
  ],
  "name": "text-mask-core",
  "optionalDependencies": {},
  "readme": "# Text Mask Core\n\nThis module contains the core functions that power Text Mask. Text Mask\nhas wrappers for Angular1, Angular2, Ember, React and Vue which can be used directly.\n\nHowever, Text Mask Core functions could be useful on their own. That's why they are published\nand documented here as a separate module.\n\n## Getting started\n\nTo download the script, use npm.\n\n```bash\nnpm i text-mask-core --save\n```\n\n\n### Include it\n\nAfter installing with npm, you could possibly do something like this from your `index.html`:\n\n```html\n<script src=\"./node_modules/text-mask-core/dist/textMaskCore.js\"></script>\n```\n\nIncluding this file in your source code will expose the global object `textMaskCore`.\n\nOr if you're using Node.js or a bundler such as webpack or Browserify, you can require\n`textMaskCore` as such:\n\n```js\nvar textMaskCore = require('text-mask-core')\n```\n\n## How to use\n\n`textMaskCore` exposes three functions:\n\n* createTextMaskInputElement\n* conformToMask\n* adjustCaretPosition\n\n### Overview\n\nThe general idea is to take user input, conform it to your desired mask using `conformToMask`,\nand then apply the output of `conformToMask` to the value of the HTML input element.\nOnce you do that however, the caret position will be lost. You can then use `adjustCaretPosition`\nto restore the caret to its proper position.\n\n---\n\n## API documentation\n\n### `createTextMaskInputElement(config)`\n\nThis function takes a configuration and returns an object with an `update` method.  The `update` method is used to conform the raw value to the mask you provide in the config.\n\n```js\n// the config requires a `mask` and a reference to an `input` element.\nconst textMaskConfig = {inputElement, mask}\n\n// initialize text mask\nconst textMaskInputElement = createTextMaskInputElement(textMaskConfig)\n\n// call `update` to conform the `inputElement.value` to the provided `mask`.\ntextMaskInputElement.update()\n```\n\nThe `textMaskConfig` requires a `mask` and a reference to the `inputElement`.  See the [documentation here](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme) for more information on the properties that the `textMaskConfig` accepts.\n\nThe default use-case is for the `textMaskConfig` to be passed to the `createTextMaskInputElement` method when you initialize Text Mask.  However, you can also pass the `value` and `textMaskConfig` to the `update` method.\n\n```js\nconst textMaskConfig = {inputElement, mask}\n\n// initialize text mask without a config (or with a default config)\nconst textMaskInputElement = createTextMaskInputElement()\n\n// call `update` with the raw value and config\ntextMaskInputElement.update(inputElement.value, textMaskConfig)\n```\n\nThe `update` method should be called every time the `inputElement.value` changes.\n\n---\n\n### `conformToMask(rawValue, mask, config)`\n\nThis function takes three arguments:\n\n* rawValue (string): the string value that you want to conform to the mask\n* mask (array or function): the mask to which you want the string to conform. You can find\n[mask documentation here](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#readme).\n* config (object): config object. See below for details\n\nThis function returns an object with a property `conformedValue` (string).\n\n```js\nconst results = conformToMask('5554833902', ['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/])\n\nresults.conformedValue // '(555) 483-3902'\n```\n\n#### config\n\nThe `config` object takes the following values\n\n* `guide` (boolean) (defaults to `true`): this tells `conformToMask` whether you want the conformed\nstring to contain a guide or no. The `guide` is basically the placeholder character and the\nmask hard characters. For example, with mask `['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/]`, input `123` with `guide` set to\n`true` would return `(123) ___-____`. With `guide` set to `false`, it would return `(123) `.\n\n* `previousConformedValue` (string) (required): this is the previous `output` of `conformToMask`.\nIf you're calling `conformToMask` for the first time, you don't have to pass this value.\n\n* `placeholderChar` (string) (optional): for documentation on this key, [see this section of the component\ndocumentation page](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#placeholderChar).\n\n```js\nconst results = conformToMask('5554833902', ['(', /[1-9]/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/])\n\nresults.conformedValue // '(555) 483-3902'\n```\n\nWhenever the value of the `input` element changes, you can pass that value to `conformToMask`\nand it'll make sure that the string looks like the given mask. You can then set that conformed\nstring as the new value of the `input` element.\n\n---\n\n### `adjustCaretPosition(argumentsObject)`\n\nWhen you set the value of the `input` element, you lose the position of the caret. This function\nhelps you restore the position.\n\n`adjustCaretPosition` takes the following object of arguments:\n\n* `previousConformedValue` (string): the string value of the `input` before the last time you set\nits value. If you're calling this function for the first time, you can pass an empty string.\n* `conformedValue` (string): the `conformedValue` returned from the last call to `conformToMask`\n* `currentCaretPosition` (integer): the position of the caret right before you called this\nfunction\n* `rawValue` (string): value of the input element\n* `placeholderChar` (string): placeholder character\n* `placeholder` (string): the generated placeholder\n* `indexesOfPipedChars` (array): an array of piped characters returned from the last call to the `pipe` function\n* `caretTrapIndexes` (array): an array of caret trap indexes\n\n`adjustCaretPosition` will return an integer representing the index of where the caret should be\nmoved to next.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/text-mask/text-mask.git"
  },
  "scripts": {},
  "version": "5.1.2"
}
