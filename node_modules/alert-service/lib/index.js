"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var merge = require("lodash.merge");
var sweetalert2_1 = require("sweetalert2");
var AlertService = (function () {
    function AlertService() {
    }
    Object.defineProperty(AlertService.prototype, "swal", {
        /** Raw swal object to create advanced popups */
        get: function () { return sweetalert2_1.default; },
        enumerable: true,
        configurable: true
    });
    /** Helper to process the various types of inputs */
    AlertService.prototype.processParams = function (options, p1, p2, p3) {
        if (p1 && typeof p1 === 'string') {
            if (p2 && typeof p2 === 'string') {
                options.title = p1;
                options.text = p2;
                p3 && (options = merge(options, p3));
            }
            else {
                options.text = p1;
                p2 && (options = merge(options, p2));
            }
        }
        else {
            p1 && (options = merge(options, p1));
        }
        return options;
    };
    AlertService.prototype.successPopup = function (p1, p2, p3) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve) {
                            var options = _this.processParams({
                                title: AlertService.Texts.successTitle,
                                type: 'success',
                            }, p1, p2, p3);
                            sweetalert2_1.default(options)
                                .then(resolve)
                                .catch(resolve);
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    AlertService.prototype.warningConfirm = function (p1, p2, p3) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var options = _this.processParams({
                            title: AlertService.Texts.warningTitle,
                            type: 'warning',
                            showCancelButton: true,
                            reverseButtons: true,
                        }, p1, p2, p3);
                        sweetalert2_1.default(options)
                            .then(resolve)
                            .catch(function (err) { return resolve(false); });
                    })];
            });
        });
    };
    AlertService.prototype.errorPopup = function (p1, p2, p3) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve) {
                            var options = _this.processParams({
                                title: AlertService.Texts.errorTitle,
                                type: 'error',
                            }, p1, p2, p3);
                            sweetalert2_1.default(options)
                                .then(resolve)
                                .catch(resolve);
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    AlertService.prototype.prompt = function (p1, p2, p3) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var options = _this.processParams({
                            input: 'text',
                            reverseButtons: true,
                            showCancelButton: true,
                        }, p1, p2, p3);
                        sweetalert2_1.default(options)
                            .then(function (res) { return resolve(res); })
                            .catch(function () { return resolve(false); });
                    })];
            });
        });
    };
    AlertService.prototype.promptMultiline = function (p1, p2, p3) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var options = _this.processParams({
                            input: 'textarea',
                            reverseButtons: true,
                            showCancelButton: true,
                        }, p1, p2, p3);
                        sweetalert2_1.default(options)
                            .then(function (res) { return resolve(res); })
                            .catch(function () { return resolve(false); });
                    })];
            });
        });
    };
    AlertService.prototype.numberPrompt = function (p1, p2, p3) {
        return __awaiter(this, void 0, void 0, function () {
            var options, result, resultNum, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        options = this.processParams({
                            input: 'number',
                            reverseButtons: true,
                            showCancelButton: true,
                        }, p1, p2, p3);
                        return [4 /*yield*/, sweetalert2_1.default(options)];
                    case 1:
                        result = _a.sent();
                        resultNum = parseFloat(result);
                        if (isNaN(resultNum))
                            return [2 /*return*/, false];
                        return [2 /*return*/, resultNum];
                    case 2:
                        err_1 = _a.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return AlertService;
}());
AlertService.Texts = {
    successTitle: 'Success',
    warningTitle: 'Warning',
    errorTitle: 'Error',
};
exports.AlertService = AlertService;
/** Add this to your Angular2 module providers. It implements the `ClassProvider` interface */
exports.AlertServiceProviderNg2 = {
    provide: AlertService,
    useClass: AlertService,
};
