{
  "_args": [
    [
      {
        "raw": "mobx-angular@2.1.1",
        "scope": null,
        "escapedName": "mobx-angular",
        "name": "mobx-angular",
        "rawSpec": "2.1.1",
        "spec": "2.1.1",
        "type": "version"
      },
      "/Users/mohammedimthiyas/Desktop/Client/node_modules/angular-tree-component"
    ]
  ],
  "_from": "mobx-angular@2.1.1",
  "_id": "mobx-angular@2.1.1",
  "_inCache": true,
  "_location": "/mobx-angular",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mobx-angular-2.1.1.tgz_1516525222829_0.7632737813983113"
  },
  "_npmUser": {
    "name": "500tech",
    "email": "info@500tech.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mobx-angular@2.1.1",
    "scope": null,
    "escapedName": "mobx-angular",
    "name": "mobx-angular",
    "rawSpec": "2.1.1",
    "spec": "2.1.1",
    "type": "version"
  },
  "_requiredBy": [
    "/angular-tree-component"
  ],
  "_resolved": "https://registry.npmjs.org/mobx-angular/-/mobx-angular-2.1.1.tgz",
  "_shasum": "d5e36539acb200186dd5a1170806b4776b9a8b88",
  "_shrinkwrap": null,
  "_spec": "mobx-angular@2.1.1",
  "_where": "/Users/mohammedimthiyas/Desktop/Client/node_modules/angular-tree-component",
  "author": {
    "name": "Adam Klein",
    "email": "adam@500tech.com"
  },
  "bugs": {
    "url": "https://github.com/mobxjs/mobx-angular/issues"
  },
  "dependencies": {},
  "description": "Angular connector to MobX (2 and above)",
  "devDependencies": {
    "@angular/common": "^5.0.0",
    "@angular/compiler": "^5.0.0",
    "@angular/compiler-cli": "^5.0.0",
    "@angular/core": "^5.0.0",
    "@angular/platform-browser": "^5.0.0",
    "@angular/platform-browser-dynamic": "^5.0.0",
    "@types/core-js": "0.9.43",
    "@types/jasmine": "2.5.37",
    "angular-cli": "1.0.0-beta.19-3",
    "codelyzer": "2.0.0-beta.4",
    "core-js": "^2.4.1",
    "jasmine-core": "2.5.2",
    "karma": "1.2.0",
    "karma-chrome-launcher": "2.0.0",
    "karma-cli": "1.0.1",
    "karma-jasmine": "1.0.2",
    "karma-typescript": "^3.0.0",
    "mobx": ">=2",
    "rimraf": "2.5.4",
    "rollup": "0.41.4",
    "rollup-plugin-node-resolve": "2.0.0",
    "rxjs": "^5.0.1",
    "ts-helpers": "1.1.1",
    "tslint": "4.4.2",
    "typescript": "^2.2.1",
    "zone.js": "^0.7.4"
  },
  "directories": {},
  "dist": {
    "shasum": "d5e36539acb200186dd5a1170806b4776b9a8b88",
    "tarball": "https://registry.npmjs.org/mobx-angular/-/mobx-angular-2.1.1.tgz"
  },
  "files": [
    "dist/"
  ],
  "gitHead": "70ce93b48d833716f83300fa5b8476264247fd70",
  "homepage": "https://github.com/mobxjs/mobx-angular#readme",
  "jsnext:main": "dist/mobx-angular.js",
  "keywords": [
    "mobx",
    "angular2",
    "ng2",
    "angular",
    "ng2-mobx",
    "angular-mobx",
    "angular2-mobx",
    "mobx-angular",
    "mobx-angular2",
    "mobx-ng2",
    "state management",
    "mobxjs"
  ],
  "license": "MIT",
  "main": "dist/mobx-angular.umd.js",
  "maintainers": [
    {
      "name": "500tech",
      "email": "info@500tech.com"
    }
  ],
  "module": "dist/mobx-angular.js",
  "name": "mobx-angular",
  "optionalDependencies": {},
  "peerDependencies": {
    "mobx": ">=2",
    "@angular/core": ">=2.3.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/mobxjs/mobx-angular.svg?branch=master)](https://travis-ci.org/mobxjs/mobx-angular)\n[![npm version](https://badge.fury.io/js/mobx-angular.svg)](https://badge.fury.io/js/mobx-angular)\n# mobx-angular\n\n## MobX connector for Angular (versions 2, 4, 5)\nIf you're looking for the Angular 1 version version, it's [here](https://github.com/NgMobx/ng1-mobx)\n\n## Features\n1. The library allows you to automatically observe all the observables that your component uses\n2. Automatically runs change detection - works great with OnPush strategy\n3. Disposes of all the observers when the component is destroyed\n4. Debugging tools\n\n## Usage\n\nInstall:\n```\n$ npm install --save mobx-angular mobx\n```\n\nImport the MobxAngularModule:\n```ts\nimport { MobxAngularModule } from 'mobx-angular';\n\n@NgModule({\n    imports: [..., MobxAngularModule]\n})\nexport class MyModule {}\n```\n\n## autorun\nUse `*mobxAutorun` directive in your template:\n```ts\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\nimport {store} from './store/counter';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div *mobxAutorun>\n      {{ store.value }} - {{ store.computedValue }}\n      <button (click)=\"store.action\">Action</button>\n    </div>\n  `\n})\nexport class AppComponent {\n    store = store;\n}\n```\n\nThe directive will do the following:\n- Observe all the observables / computed values that your component uses\n- Automatically run the `detectChanges` method whenever there's a relevant change\n\nUnder the hood, this magic happens by running `autorun(() => view.detectChanges())`\n\n## detach\nYou can improve your component's performance by detaching it from CD (Change Detection), by supplying `*mobxAutorun=\"{ detach: true }\"`. \n\nThis might cause things to stop updating. You have 3 options to manage that:\n- Define local component properties as observables or computed values\n- Surround with *mobxAutorun only the parts that actually use observable / computed values from the store\n- Instead of detaching, use OnPush CD strategy on the component\n\n## autorunSync\nThis method is deprecated - do not use it.\n\n## reaction\nAside from autorun, MobX allows you to react to specific data changes.\n\nUsage:\n```ts\nimport { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `<div *mobxReaction=\"getParity.bind(this)\">\n    {{ parity }}\n  </div>`\n})\nclass AppComponent {\n  getParity() {\n    return this.parity = store.counter % 2 ? 'Odd' : 'Even';\n  }\n}\n```\nThe `callback` function will automatically re-run whenever any observable that it uses changes.\nChange Detection will run automatically whenever the return value of `callback` changes.\nIf you don't return anything, change detection will not run.\n\nIn this example, the `parity` property will be updated according to `counter`,\nand change detection will run only when the `parity` changes.\n\n## Injectable stores\nYou can easily make your stores injectable:\n```ts\nimport { observable, action } from 'mobx-angular';\n\n@Injectable()\nclass Store {\n  @observable value;\n  @action doSomething() { ... }\n}\n```\n## Using with OnPush or ngZone: 'noop'\nTo achieve great performance, you can set `OnPush` change detection strategy on your components (this can be configured as default in `.angular-cli.json`).\nMobX will run change detection manually for you on the components that need to be updated.\n\n* In Angular 5 there's a new option, which is to disable Zone completely when bootstrapping the app (ngZone: 'noop').\nPlease note that this means that all 3rd-party components will stop working (because they rely on change detection to work via Zone).\n\n## Debugging MobX\nmobx-angular comes with a handy debug tool.\nTo turn on / off the debug tool, open developer tools' console, and run:\n```ts\nmobxAngularDebug(true) // turn on\nmobxAngularDebug(false) // turn off\n```\nThen you can right-click on the components that use mobx directives, and you will see a console log of the components' dependencies.\nAlso, every action that happens in mobx will be console.logged in a nice way.\n\n## AoT\nSome people complained about AoT when using mobx decorators inside components. \nIn case you do that - we export a proxy to the decorators from mobx-angular, which should be AoT compatible, e.g.:  \n`import { observable, computed } from 'mobx-angular'`\n\nThe only thing you can't do when importing from mobx-angular is using the modifiers, such as `@observable.ref`.\n\n## Examples\nSee the `example` folder, specifically these files:  \n`/example/todos/src/app/stores/todos.store.ts`  \n`/example/todos/src/app/app.component.ts`\n\nTo run the examples, clone this repo and run:\n```\n$ npm install -g @angular/cli\n$ cd example/<example-folder>\n$ npm install\n$ npm start\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mobxjs/mobx-angular.git"
  },
  "scripts": {
    "build": "npm run lint && npm run clean && ngc && npm run rollup",
    "clean": "rimraf dist",
    "lint": "tslint lib/**/*.ts",
    "prepublishOnly": "npm run build && npm run test",
    "rollup": "rollup -c rollup.config.js dist/mobx-angular.js > dist/mobx-angular.umd.js",
    "tdd": "karma start",
    "test": "karma start --single-run"
  },
  "typings": "dist/mobx-angular.d.ts",
  "version": "2.1.1"
}
