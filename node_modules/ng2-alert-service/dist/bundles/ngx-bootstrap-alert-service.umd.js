(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Subject'), require('@angular/common')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Subject', '@angular/common'], factory) :
	(factory((global['ngx-bootstrap-alert-service'] = {}),global.core,global.Subject,global.common));
}(this, (function (exports,core,Subject,common) { 'use strict';

var BootstrapAlertService = /** @class */ (function () {
    function BootstrapAlertService() {
        this.messageId = 0;
        this.alertEvent = new Subject.Subject();
    }
    BootstrapAlertService.prototype.getAlertEvent = function () {
        return this.alertEvent.asObservable();
    };
    BootstrapAlertService.prototype.showSucccess = function (message) {
        this.showToast("success", message);
    };
    BootstrapAlertService.prototype.showInfo = function (message) {
        this.showToast("info", message);
    };
    BootstrapAlertService.prototype.showWarning = function (message) {
        this.showToast("warning", message);
    };
    BootstrapAlertService.prototype.showError = function (message) {
        this.showToast("danger", message);
    };
    BootstrapAlertService.prototype.showToast = function (level, message) {
        var toast = {
            id: this.messageId++,
            type: level,
            message: message,
            messageLocalized: ""
        };
        this.alertEvent.next(toast);
    };
    BootstrapAlertService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    BootstrapAlertService.ctorParameters = function () { return []; };
    return BootstrapAlertService;
}());

var ToastMessageComponentComponent = /** @class */ (function () {
    function ToastMessageComponentComponent() {
        this.alerts = [];
    }
    ToastMessageComponentComponent.prototype.ngOnInit = function () {
    };
    ToastMessageComponentComponent.prototype.closeAlert = function (alert) {
        this.alerts.splice(this.alerts.indexOf(alert), 1);
    };
    ToastMessageComponentComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'toast-message-component',
                    styles: ["div.floating-alert{\n                position: fixed;\n                right: 1%;\n                top: 1em;\n                z-index: 10;\n              button{\n                  margin-left: 20px;\n              }\n            }"],
                    template: "<div class=\"floating-alert\">\n                <div class=\"alert alert-{{alertObject.type}}\" *ngFor=\"let alertObject of alerts\">\n                  <button class=\"close\" data-dismiss=\"alert\" aria-label=\"close\" title=\"close\" (click)=\"closeAlert(alertObject)\">  <span aria-hidden=\"true\">&times;</span></button>    {{alertObject.message}}\n                </div>\n              </div>"
                },] },
    ];
    /** @nocollapse */
    ToastMessageComponentComponent.ctorParameters = function () { return []; };
    ToastMessageComponentComponent.propDecorators = {
        "alerts": [{ type: core.Input },],
    };
    return ToastMessageComponentComponent;
}());

var BootstrapAlertModule = /** @class */ (function () {
    function BootstrapAlertModule() {
    }
    BootstrapAlertModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [ToastMessageComponentComponent],
                    exports: [
                        ToastMessageComponentComponent
                    ],
                    providers: [BootstrapAlertService]
                },] },
    ];
    /** @nocollapse */
    BootstrapAlertModule.ctorParameters = function () { return []; };
    return BootstrapAlertModule;
}());

exports.BootstrapAlertModule = BootstrapAlertModule;

Object.defineProperty(exports, '__esModule', { value: true });

})));
