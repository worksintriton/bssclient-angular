import { Injectable } from '@angular/core';
var Events = /** @class */ (function () {
    function Events() {
        this.c = [];
    }
    /**
     * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.
     *
     * @param {string} topic the topic to subscribe to
     * @param {function} handler the event handler
     */
    /**
       * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.
       *
       * @param {string} topic the topic to subscribe to
       * @param {function} handler the event handler
       */
    Events.prototype.subscribe = /**
       * Subscribe to an event topic. Events that get posted to that topic will trigger the provided handler.
       *
       * @param {string} topic the topic to subscribe to
       * @param {function} handler the event handler
       */
    function (topic) {
        var _this = this;
        var handlers = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            handlers[_i - 1] = arguments[_i];
        }
        if (!this.c[topic]) {
            this.c[topic] = [];
        }
        handlers.forEach(function (handler) {
            _this.c[topic].push(handler);
        });
    };
    /**
     * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.
     *
     * @param {string} topic the topic to unsubscribe from
     * @param {function} handler the event handler
     *
     * @return true if a handler was removed
     */
    /**
       * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.
       *
       * @param {string} topic the topic to unsubscribe from
       * @param {function} handler the event handler
       *
       * @return true if a handler was removed
       */
    Events.prototype.unsubscribe = /**
       * Unsubscribe from the given topic. Your handler will no longer receive events published to this topic.
       *
       * @param {string} topic the topic to unsubscribe from
       * @param {function} handler the event handler
       *
       * @return true if a handler was removed
       */
    function (topic, handler) {
        if (handler === void 0) { handler = null; }
        var t = this.c[topic];
        if (!t) {
            // Wasn't found, wasn't removed
            return false;
        }
        if (!handler) {
            // Remove all handlers for this topic
            delete this.c[topic];
            return true;
        }
        // We need to find and remove a specific handler
        var i = t.indexOf(handler);
        if (i < 0) {
            // Wasn't found, wasn't removed
            return false;
        }
        t.splice(i, 1);
        // If the channel is empty now, remove it from the channel map
        if (!t.length) {
            delete this.c[topic];
        }
        return true;
    };
    /**
     * Publish an event to the given topic.
     *
     * @param {string} topic the topic to publish to
     * @param {any} eventData the data to send as the event
     */
    /**
       * Publish an event to the given topic.
       *
       * @param {string} topic the topic to publish to
       * @param {any} eventData the data to send as the event
       */
    Events.prototype.publish = /**
       * Publish an event to the given topic.
       *
       * @param {string} topic the topic to publish to
       * @param {any} eventData the data to send as the event
       */
    function (topic) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var t = this.c[topic];
        if (!t) {
            return null;
        }
        var responses = [];
        t.forEach(function (handler) {
            responses.push(handler.apply(void 0, args));
        });
        return responses;
    };
    Events.decorators = [
        { type: Injectable },
    ];
    return Events;
}());
export { Events };
export function setupEvents() {
    var events = new Events();
    window.addEventListener('online', function (ev) { return events.publish('app:online', ev); });
    window.addEventListener('offline', function (ev) { return events.publish('app:offline', ev); });
    window.addEventListener('orientationchange', function (ev) { return events.publish('app:rotated', ev); });
    return events;
}
export function setupProvideEvents() {
    return function () {
        return setupEvents();
    };
}
