{
  "_args": [
    [
      {
        "raw": "tsickle@^0.32.1",
        "scope": null,
        "escapedName": "tsickle",
        "name": "tsickle",
        "rawSpec": "^0.32.1",
        "spec": ">=0.32.1 <0.33.0",
        "type": "range"
      },
      "/Users/mohammedimthiyas/Desktop/Client/node_modules/@angular/compiler-cli"
    ]
  ],
  "_from": "tsickle@>=0.32.1 <0.33.0",
  "_id": "tsickle@0.32.1",
  "_inCache": true,
  "_location": "/tsickle",
  "_nodeVersion": "8.9.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tsickle_0.32.1_1532624245156_0.667885247600061"
  },
  "_npmUser": {
    "name": "angular",
    "email": "devops+npm@angular.io"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tsickle@^0.32.1",
    "scope": null,
    "escapedName": "tsickle",
    "name": "tsickle",
    "rawSpec": "^0.32.1",
    "spec": ">=0.32.1 <0.33.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@angular/compiler-cli"
  ],
  "_resolved": "https://registry.npmjs.org/tsickle/-/tsickle-0.32.1.tgz",
  "_shasum": "f16e94ba80b32fc9ebe320dc94fbc2ca7f3521a5",
  "_shrinkwrap": null,
  "_spec": "tsickle@^0.32.1",
  "_where": "/Users/mohammedimthiyas/Desktop/Client/node_modules/@angular/compiler-cli",
  "bin": {
    "tsickle": "src/main.js"
  },
  "bugs": {
    "url": "https://github.com/angular/tsickle/issues"
  },
  "contributors": [
    {
      "name": "Evan Martin",
      "email": "evanm@google.com",
      "url": "https://angular.io/"
    },
    {
      "name": "Alex Eagle",
      "email": "alexeagle@google.com",
      "url": "https://angular.io/"
    },
    {
      "name": "Martin Probst",
      "email": "martinprobst@google.com",
      "url": "https://angular.io/"
    },
    {
      "name": "Rado Kirov",
      "email": "radokirov@google.com",
      "url": "https://angular.io/"
    },
    {
      "name": "Thomas Deegan",
      "email": "tdeegan@google.com"
    }
  ],
  "dependencies": {
    "jasmine-diff": "^0.1.3",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1",
    "source-map": "^0.6.0",
    "source-map-support": "^0.5.0"
  },
  "description": "Transpile TypeScript code to JavaScript with Closure annotations.",
  "devDependencies": {
    "@types/diff": "3.2.2",
    "@types/glob": "5.0.35",
    "@types/jasmine": "2.8.6",
    "@types/minimatch": "3.0.3",
    "@types/minimist": "1.2.0",
    "@types/mkdirp": "0.5.2",
    "@types/node": "^10.3.3",
    "@types/source-map-support": "0.4.0",
    "clang-format": "1.2.2",
    "diff": "3.5.0",
    "glob": "7.1.2",
    "google-closure-compiler": "20161024.3.0",
    "gulp": "3.9.1",
    "gulp-clang-format": "1.0.25",
    "gulp-typescript": "4.0.1",
    "jasmine": "3.1.0",
    "merge2": "1.2.1",
    "temp": "0.8.3",
    "tslint": "5.9.1",
    "tsutils": "^2.27.1",
    "typescript": "2.9.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "integrity": "sha512-JW9j+W0SaMSZGejIFZBk0AiPfnhljK3oLx5SaqxrJhjlvzFyPml5zqG1/PuScUj6yTe1muEqwk5CnDK0cOZmKw==",
    "shasum": "f16e94ba80b32fc9ebe320dc94fbc2ca7f3521a5",
    "tarball": "https://registry.npmjs.org/tsickle/-/tsickle-0.32.1.tgz",
    "fileCount": 39,
    "unpackedSize": 1236098,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbWf11CRA9TVsSAnZWagAAVhkP/1rHck03ugZYT9EzvbLJ\nimTngXDvBu3U/ZD61bJ8hfNwdLNCcEzPlqIDVE3GaXBBzo4LGfjd2amrj7Pa\nHOx3KVjh4YIWoO2AdLQiyh4TzcwrVrgHjMl2LtqCN6Qsz00MA0wi9vBCLsLK\nMOS+U/un5GiuV8ykY49qxQN/Gx1NGYI8pJXi19VGsVMRvIf/vdbwMlKzNorc\nMVn4qWCTstfu4HL9/04GcbcMwh3Va8ojo1cluysbqqCmJUZR1L3+ti4xu31n\nXxZMo/pQaYY43g8AEhG60lBkDHRmLsrOy3ohtTbboBUnAhsvShXO6c3teclD\nHwE4h6W8P0W75ZXndXF6samVLRmUsyzUNaXP1TPHpOY7W23eLPXYceyhZmV3\nhdYSGoJ+8zVZr3k18ylGLrB34mbxJyiEjiwyJS4ZB1KiT7i8huSQaSzT4lK4\nZ52HWcm3QKCxTWLeUmxbsrTkUOilRaymUPfaJ0I6d/gKx2cx6xhGhEUnfAz5\n1FBDSM61H1sEzqooIpjD4HVxIDq6HSmmZCqe1fSnAKBZqtFsDulhxzv0ef+p\nmohw4/Di8+gQjC2fTkgZZkZgI0SrlMnQqCm/Rik+TuBaHC3366fND6LA0Rzc\nVvM7kbWihD2Gf5uoamW+44rEi4er/aYXUdushBKnAcdRzZ8J5zEDsOLfyyC+\nJFnL\r\n=yV6i\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "src/*"
  ],
  "homepage": "https://github.com/angular/tsickle",
  "keywords": [
    "typescript",
    "closure"
  ],
  "license": "MIT",
  "main": "src/tsickle.js",
  "maintainers": [
    {
      "name": "angularcore",
      "email": "angular-core+npm@google.com"
    },
    {
      "name": "mprobst",
      "email": "martin@probst.io"
    }
  ],
  "name": "tsickle",
  "optionalDependencies": {},
  "peerDependencies": {
    "typescript": ">=2.4.2 <2.10"
  },
  "private": false,
  "readme": "# Tsickle - TypeScript to Closure Translator [![Linux build](https://travis-ci.org/angular/tsickle.svg?branch=master)](https://travis-ci.org/angular/tsickle) [![Windows build](https://ci.appveyor.com/api/projects/status/puxdblmlqbofqqt1/branch/master?svg=true)](https://ci.appveyor.com/project/alexeagle/tsickle/branch/master)\n\nTsickle converts TypeScript code into a form acceptable to the [Closure\nCompiler].  This allows using TypeScript to transpile your sources, and then\nusing Closure Compiler to bundle and optimize them, while taking advantage of\ntype information in Closure Compiler.\n\n[Closure Compiler]: https://github.com/google/closure-compiler/\n\n## What conversion means\n\nA (non-exhaustive) list of the sorts of transformations Tsickle applies:\n\n- inserts Closure-compatible JSDoc annotations on functions/classes/etc\n- converts ES6 modules into `goog.module` modules\n- generates externs.js from TypeScript d.ts (and `declare`, see below)\n- declares types for class member variables\n- translates `export * from ...` into a form Closure accepts\n- converts TypeScript enums into a form Closure accepts\n- reprocesses all jsdoc to strip Closure-invalid tags\n\nIn general the goal is that you write valid TypeScript and Tsickle handles\nmaking it valid Closure Compiler code.\n\n## Warning: work in progress\n\nWe already use tsickle within Google to minify our apps (including those using\nAngular), but we have less experience using tsickle with the various JavaScript\nbuilds that are seen outside of Google.\n\nWe would like to make tsickle usable for everyone but right now if you'd like\nto try it you should expect to spend some time debugging and reporting bugs.\n\n## Usage\n\n### Project Setup\n\nTsickle works by wrapping `tsc`.  To use it, you must set up your project such\nthat it builds correctly when you run `tsc` from the command line, by\nconfiguring the settings in `tsconfig.json`.\n\nIf you have complicated tsc command lines and flags in a build file (like a\ngulpfile etc.) Tsickle won't know about it.  Another reason it's nice to put\neverything in `tsconfig.json` is so your editor inherits all these settings as\nwell.\n\n### Invocation\n\nRun `tsickle --help` for the full syntax, but basically you provide any tsickle\nspecific options and use it as a TypeScript compiler.\n\n### Differences from TypeScript\n\nClosure and TypeScript are not identical.  Tsickle hides most of the\ndifferences, but users must still be aware of some differences.\n\n#### `declare`\n\nAny declaration in a `.d.ts` file, as well as any declaration tagged with\n`declare ...`, is intepreted by Tsickle as a name that should be preserved\nthrough Closure compilation (i.e. not renamed into something shorter).  Use it\nany time the specific string names of your fields are significant.  That would\nmost often happen when the object either coming from outside your program, or\nbeing passed out of the program.\n\nExample:\n\n    declare interface JSONResult {\n        username: string;\n    }\n    let r = JSON.parse(input) as JSONResult;\n    console.log(r.username);\n\nBy adding `declare` to the interface (or if it were in a `.d.ts` file), Tsickle\nwill inform Closure that it must use exactly the field name `.username` (and not\ne.g. `.a`) in the output JS.  This matters for this example because the input\nJSON probably uses the string `'username'` and not whatever name Closure would\ninvent for it.  (Note: `declare` on an interface has no additional meaning in\npure TypeScript.)\n\n#### Exporting decorators\n\nAn exporting decorator is a decorator that has `@ExportDecoratedItems` in its\nJSDoc.\n\nThe names of elements that have an exporting decorator are preserved through\nthe Closure compilation process by applying an `@export` tag to them.\n\nExample:\n\n    /** @ExportDecoratedItems */\n    function myDecorator() {\n      // ...\n    }\n\n    @myDecorator()\n    class DoNotRenameThisClass { ... }\n\n## Development\n\n### One-time setup\n\nRun `bazel run @nodejs//:yarn --script_path=yarn_install.sh && ./yarn_install.sh`\nto install the dependencies.\n\n> This avoids occupying the `bazel` server, so that `yarn` can call `bazel`\n> again.\n> Ideally we should just use `bazel-run.sh @nodejs//:yarn`, see\n> https://stackoverflow.com/questions/47082298/how-can-users-get-bazel-run-sh\n\n### Test commands\n\n- `ibazel test test:unit_test` executes the unit tests in watch mode (use `bazel test test:unit_test` for a\n  single run),\n- `bazel test test:e2e_test` executes the e2e tests,\n- `bazel test test:golden_test` executes the golden tests,\n- `gulp test.check-format` checks the source code formatting using\n  `clang-format`,\n- `yarn test` runs unit tests, e2e tests and checks the source code formatting.\n\n### Debugging\n\nYou can debug tests by using `bazel run` and passing `--node_options=--inspect`. For example, to\ndebug a specific golden test:\n\n```shell\nTEST_FILTER=my_golden_test ibazel run //test:golden_test -- --node_options=--inspect\n```\n\nThen open [about:inspect] in Chrome and choose \"about:inspect\". Chrome will launch a debugging\nsession on any node process that starts with a debugger listening on one of the listed ports. The\ntsickle tests and Chrome both default to `localhost:9229`, so things should work out of the box.\n\nVS Code can also connect using the inspect protocol. It doesn't support automatically reconnecting\nor any way to re-run the test suite though, so it is a less convenient. You can start the node\nprocess passing an extra `--node_options=--debug-brk` (in addition to the parameters above) to have\nNode wait before program execution, so you have time to attach VS Code.\n\n### Updating Goldens\n\nRun `UPDATE_GOLDENS=y bazel run test:golden_test` to have the test suite update\nthe goldens in `test_files/...`.\n\n### Environment variables\n\nPass the flag `--action_env=TEST_FILTER=<REGEX>` to bazel test to limit the\nend-to-end test (found in `test_files/...`) run tests with a name matching the\nregex.\n\n### Releasing\n\nOn a new branch, run `npm version <major|minor|patch|...> -m 'rel: %s'` (see\n`npm help version` for details). It will update the version in `package.json`,\ncommit the changes, and create a git tag. Now you push the branch, get it\nreviewed and merged.\n\nRun `bazel run :npm_package.publish` from the master branch\n(you must be logged into the `angular` shared npm account).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/angular/tsickle.git"
  },
  "scripts": {
    "build": "bazel build //:npm_package",
    "test": "gulp test.check-format && node_modules/.bin/tslint -c tslint.json -p tsconfig.json && bazel test ..."
  },
  "typings": "src/tsickle.d.ts",
  "version": "0.32.1"
}
