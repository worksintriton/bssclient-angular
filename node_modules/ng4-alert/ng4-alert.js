import { Component, Injectable, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Subject as Subject$1 } from 'rxjs/Subject';

class Ng4AlertService {
    constructor() {
        this.ngnSubject = new Subject$1();
        this.options = {};
    }
    /**
     * @param {?} options
     * @return {?}
     */
    ng4Activate(options) {
        this.options = options;
        this.options.state = 'active';
        this.ngnSubject.next(options);
    }
    /**
     * @return {?}
     */
    ng4Deactivate() {
        this.options.state = 'inactive';
        this.ngnSubject.next(this.options);
        //return this.ngnSubject.asObservable()
    }
    /**
     * @return {?}
     */
    ng4State() {
        return this.ngnSubject.asObservable();
    }
}
Ng4AlertService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
Ng4AlertService.ctorParameters = () => [];

class Ng4AlertComponent {
    /**
     * @param {?} ng4AlertService
     */
    constructor(ng4AlertService) {
        this.ng4AlertService = ng4AlertService;
        this.state = 'inactive';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ng4AlertService.ng4State().subscribe(message => {
            this.options = message;
            this.setState(this.options.state);
            if (this.options.autoDismis && this.options.timeout) {
                setTimeout(() => {
                    this.setState('inactive');
                }, this.options.timeout);
            }
            else if (this.options.autoDismis !== false) {
                setTimeout(() => {
                    this.setState('inactive');
                }, 2000);
            }
        });
    }
    /**
     * @param {?} state
     * @return {?}
     */
    setState(state$$1) {
        this.state = state$$1;
    }
    /**
     * @return {?}
     */
    ngnClose() {
        this.ng4AlertService.ng4Deactivate();
    }
}
Ng4AlertComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng4-alert',
                template: `
   <div class="ngn-wrapper" [@ngnState]="state" [ngSwitch]="options.type">
   	<div class="ngn-alert ngn-default ngn-success" *ngSwitchCase="'success'">
   		<div class="ngn-icon"><img src="../assets/ic_done_white_24px.svg"/></div>
   		<div class="ngn-content">{{options.text}}</div>
   		<div class="ngn-icon ngn-close" (click)="ngnClose()"><img src="../assets/ic_clear_white_18px.svg"/></div>
   	</div>
   	<div class="ngn-alert ngn-default ngn-danger" *ngSwitchCase="'fail'">
   		<div class="ngn-icon"><img src="../assets/ic_error_white_24px.svg"/></div>
   		<div class="ngn-content">{{options.text}}</div>
   		<div class="ngn-icon ngn-close" (click)="ngnClose()"><img src="../assets/ic_clear_white_18px.svg"/></div>
   	</div>
   	<div class="ngn-alert ngn-default ngn-warning" *ngSwitchCase="'warning'">
   		<div class="ngn-icon"><img src="../assets/ic_warning_white_24px.svg"/></div>
   		<div class="ngn-content">{{options.text}}</div>
   		<div class="ngn-icon ngn-close" (click)="ngnClose()"><img src="../assets/ic_clear_white_18px.svg"/></div>
   	</div>
   	<div class="ngn-loader" *ngSwitchCase="'loading'">
   		<div class="loader"></div>
   	</div>
   </div>
	`,
                styles: [`
   h1 {
     color: red;
   }

   .ngn-default{
       padding: .50rem .8rem;
       border: 1px solid transparent;
       border-radius: .25rem;
   }
   .ngn-success{
   	color: #fff;
       background-color: #5cb85c;
       border-color: #5cb85c;
   }
   .ngn-warning{
   	color: #fff;
       background-color: #ec971f;
       border-color: #eb9316;
   }    

   .ngn-danger{
   	color: #fff;
       background-color: #c9302c;
       border-color: #c12e2a;
   }
   .ngn-icon{
       display: inline;
   }
   .ngn-content{
       display: inline;
       vertical-align: super;
       margin-left: 5px;
   }
   /* .ngn-default .ngn-icon img{
   	margin-top: 2px;
   }	 */
   .ngn-close{
   	float: right;
       cursor: pointer; 
       top: 5px;
       position: relative;
       right: -9px;
       opacity: .5;
   }
   .ngn-close:hover{
   	opacity: 0.7;
   }
   .ngn-wrapper{
       max-width: 200px;
       min-width: 200px;
       position: absolute;
       top: 10px;
       right: 10px;
       z-index: 1000;
   }
	`],
                animations: [
                    trigger('ngnState', [
                        state('inactive', style({
                            display: 'none',
                            opacity: 0
                        })),
                        state('active', style({
                            display: 'block',
                            opacity: 0.7
                        })),
                        transition('active <=> inactive', animate('300ms')),
                    ])
                ]
            },] },
];
/**
 * @nocollapse
 */
Ng4AlertComponent.ctorParameters = () => [
    { type: Ng4AlertService, },
];
Ng4AlertComponent.propDecorators = {
    'options': [{ type: Input },],
};

class Ng4AlertModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: Ng4AlertModule,
            providers: [Ng4AlertService]
        };
    }
}
Ng4AlertModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    BrowserAnimationsModule
                ],
                declarations: [
                    Ng4AlertComponent
                ],
                exports: [
                    Ng4AlertComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
Ng4AlertModule.ctorParameters = () => [];

/**
 * Generated bundle index. Do not edit.
 */

export { Ng4AlertModule, Ng4AlertService, Ng4AlertComponent };
//# sourceMappingURL=ng4-alert.js.map
