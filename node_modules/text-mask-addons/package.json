{
  "_args": [
    [
      {
        "raw": "text-mask-addons@3.8.0",
        "scope": null,
        "escapedName": "text-mask-addons",
        "name": "text-mask-addons",
        "rawSpec": "3.8.0",
        "spec": "3.8.0",
        "type": "version"
      },
      "/Users/mohammedimthiyas/Desktop/Client"
    ]
  ],
  "_from": "text-mask-addons@3.8.0",
  "_id": "text-mask-addons@3.8.0",
  "_inCache": true,
  "_location": "/text-mask-addons",
  "_nodeVersion": "6.14.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/text-mask-addons_3.8.0_1532984129348_0.1941176293864062"
  },
  "_npmUser": {
    "name": "lozjackson",
    "email": "lozjacksonuk@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "text-mask-addons@3.8.0",
    "scope": null,
    "escapedName": "text-mask-addons",
    "name": "text-mask-addons",
    "rawSpec": "3.8.0",
    "spec": "3.8.0",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/text-mask-addons/-/text-mask-addons-3.8.0.tgz",
  "_shasum": "17b61ef665a4f36811f2ea1f01a223b4be61ab26",
  "_shrinkwrap": null,
  "_spec": "text-mask-addons@3.8.0",
  "_where": "/Users/mohammedimthiyas/Desktop/Client",
  "author": {
    "name": "M.K. Safi",
    "email": "msafi@msafi.com"
  },
  "bugs": {
    "url": "https://github.com/text-mask/text-mask/issues"
  },
  "dependencies": {},
  "description": "Addons for Text Mask https://github.com/text-mask/text-mask",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "17b61ef665a4f36811f2ea1f01a223b4be61ab26",
    "tarball": "https://registry.npmjs.org/text-mask-addons/-/text-mask-addons-3.8.0.tgz",
    "fileCount": 23,
    "unpackedSize": 115228
  },
  "homepage": "https://github.com/text-mask/text-mask/tree/master/addons/#readme",
  "keywords": [
    "text mask",
    "input mask",
    "string mask",
    "input formatting",
    "text formatting",
    "string formatting"
  ],
  "license": "Unlicense",
  "main": "dist/textMaskAddons.js",
  "maintainers": [
    {
      "name": "browniefed",
      "email": "browniefed@gmail.com"
    },
    {
      "name": "lozjackson",
      "email": "lozjacksonuk@gmail.com"
    },
    {
      "name": "msafi",
      "email": "msafi@msafi.com"
    }
  ],
  "name": "text-mask-addons",
  "optionalDependencies": {},
  "readme": "# Text Mask Addons\n\nThese addons are ready-to-use pipes and masks that can be used with Text Mask.\n\n## Installation\n\n```bash\nnpm i text-mask-addons --save\n```\n\n## Masks\n\nThese can be passed as a\n[`mask`](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#mask)\nto Text Mask.\n\n### `createNumberMask`\n\n`createNumberMask` returns a `numberMask` function that will format user input as currency.\n`createNumberMask` accepts an object with the following keys:\n\n1. `prefix` (string): what to display before the amount. Defaults to `'$'`.\n1. `suffix` (string): what to display after the amount. Defaults to empty string.\n1. `includeThousandsSeparator` (boolean): whether or not to separate thousands. Defaults to to `true`.\n1. `thousandsSeparatorSymbol` (string): character with which to separate thousands. Default to `','`.\n1. `allowDecimal` (boolean): whether or not to allow the user to enter a fraction with the amount. Default to `false`.\n1. `decimalSymbol` (string): character that will act as a decimal point. Defaults to `'.'`\n1. `decimalLimit` (number): how many digits to allow after the decimal. Defaults to `2`\n1. `integerLimit` (number): limit the length of the integer number. Defaults to `null` for unlimited\n1. `requireDecimal` (boolean): whether or not to always include a decimal point and placeholder for decimal digits\nafter the integer. Defaults to `false`.\n1. `allowNegative` (boolean): whether or not to allow negative numbers. Defaults to `false`\n1. `allowLeadingZeroes` (boolean): whether or not to allow leading zeroes. Defaults to `false`\n\n#### Usage\n\n```js\nimport createNumberMask from 'text-mask-addons/dist/createNumberMask'\n\n// First, you need to create the `numberMask` with your desired configurations\nconst numberMask = createNumberMask({\n  prefix: '',\n  suffix: ' $' // This will put the dollar sign at the end, with a space.\n})\n\n// ...then pass `numberMask` to the Text Mask component as the mask\n```\n\n### `emailMask`\n\n`emailMask` formats user input as an email address.\n\n#### Usage\n\n```js\nimport emailMask from 'text-mask-addons/dist/emailMask'\n\n// ...then pass `emailMask` to the Text Mask component as the mask\n```\n\n*Technical side note*: even though `emailMask` is passed as a `mask`, it is actually made of both a `mask` and a `pipe` bundled \ntogether for convenience. The Text Mask component knows how to unwrap and separate the `pipe` and `mask` functions to use them. \n\n## Pipes\n\nThese functions here can be passed as a\n[`pipe`](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#pipe)\nto Text Mask.\n\n### `createAutoCorrectedDatePipe`\n\nThe `createAutoCorrectedDatePipe` returns a `autoCorrectedDatePipe`, which can help the user in entering a date.\nThe `createAutoCorrectedDatePipe` accepts a string specifying date format and an object with the following keys:\n\n1. `minYear` (number): the minimum year allowed in the date field `mask`.\n1. `maxYear` (number): the maximum year allowed in the date field `mask`.\n\n\nFor example, if the user enters a value\nlarger than `1` in the 1st slot of month, it appends `0` to it. That is `4` => `04`. It does a similar thing for the\nday slots.\n\nIt also blocks the user from entering invalid days or months such as `33/44`.\n\nFor `createAutoCorrectedDatePipe` to work properly, the Text Mask component needs to be\nconfigured with\n[`keepCharPositions`](https://github.com/text-mask/text-mask/blob/master/componentDocumentation.md#keepcharpositions)\nset to `true`.\n\n#### Usage\n\n```js\nimport createAutoCorrectedDatePipe from 'text-mask-addons/dist/createAutoCorrectedDatePipe'\n\nconst autoCorrectedDatePipe = createAutoCorrectedDatePipe('mm/dd/yyyy HH:MM')\n// As you can see in the line above, you can pass a string argument to `createAutoCorrectedDatePipe` \n// to give it the order of day, month, year, hour and minute in your `mask`.\n\n// ...now you can pass `autoCorrectedDatePipe` to the Text Mask component as the `pipe`\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/text-mask/text-mask.git"
  },
  "scripts": {},
  "version": "3.8.0"
}
